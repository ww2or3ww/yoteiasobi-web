type YoteiasobiCalendar
  @model (
    queries: { get: "getCalendar", list: "listCalendar" },
    mutations: {create: "createCalendar", update: null, delete: "deleteCalendar"}
    subscriptions: {
      onCreate: ["onCreateCalendarAll", "onCreateCalendarBy(owner: String!)"]
      level: on
    }
  )
  @auth(rules: [
    {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create, delete]}
    {allow: private, provider: userPools, operations:[read]}
  ])
  @key(fields:["owner", "calendarId"])
{
  owner: String!
  calendarId: String!
  title: String!
  image: String
  description: String
  address: String
  tel: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

type YoteiasobiCalendar2
  @model (
    queries: { get: "getCalendar2", list: "listCalendar2" },
    mutations: {create: "createCalendar2", update: null, delete: "deleteCalendar2"}
    subscriptions: {
      onCreate: ["onCreateCalendar2All", "onCreateCalendar2By(owner: String!)"]
      level: on
    }
  )
  @auth(rules: [
    {allow: owner, ownerField:"owner", provider: userPools, operations:[read, create, delete]}
    {allow: private, provider: userPools, operations:[read]}
  ])
  @key(fields:["calendarId"])
{
  calendarId: String!
  title: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

type PrivateNote
  @model
  @auth(rules: [{allow: owner}])
{
  id: ID!
  content: String!
  updatedAt: String
}